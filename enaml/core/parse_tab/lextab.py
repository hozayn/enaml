# lextab.py. This file automatically created by PLY (version 3.8). Don't edit!
_tabversion   = '3.8'
_lextokens    = {'MINUS', 'YIELD', 'PLUS', 'DEL', 'BREAK', 'IMPORT', 'SLASH', 'IN', 'PRAGMA', 'GREATEREQUAL', 'RETURN', 'CONTINUE', 'TILDE', 'RBRACE', 'COLON', 'ENAMLDEF', 'FINALLY', 'LSQB', 'DOUBLESTAR', 'IS', 'DOUBLESTAREQUAL', 'ELLIPSIS', 'EXCEPT', 'DOUBLESLASH', 'STRING_START_SINGLE', 'TEMPLATE', 'VBAREQUAL', 'CONST', 'TRY', 'ELIF', 'STRING_CONTINUE', 'NAME', 'GREATER', 'STRING_END', 'RIGHTARROW', 'ASSERT', 'FOR', 'IF', 'RIGHTSHIFT', 'LESS', 'NEWLINE', 'ENDMARKER', 'NOT', 'STAREQUAL', 'WITH', 'STRING_START_TRIPLE', 'FROM', 'WS', 'COLONEQUAL', 'COMMA', 'CLASS', 'LAMBDA', 'LEFTSHIFTEQUAL', 'VBAR', 'AMPEREQUAL', 'WHILE', 'DOT', 'AT', 'PRINT', 'RAISE', 'DOUBLESLASHEQUAL', 'DOUBLECOLON', 'EXEC', 'INDENT', 'PLUSEQUAL', 'OR', 'ELSE', 'PASS', 'PERCENTEQUAL', 'ALIAS', 'EQUAL', 'CIRCUMFLEXEQUAL', 'EQEQUAL', 'SEMI', 'STAR', 'SLASHEQUAL', 'STRING', 'RPAR', 'DEDENT', 'AMPER', 'CIRCUMFLEX', 'LEFTSHIFT', 'RIGHTSHIFTEQUAL', 'LBRACE', 'RSQB', 'PERCENT', 'LPAR', 'DEF', 'NOTEQUAL', 'AND', 'LESSEQUAL', 'AS', 'GLOBAL', 'MINUSEQUAL', 'NUMBER'}
_lexreflags   = 0
_lexliterals  = ''
_lexstateinfo = {'SINGLEQ2': 'exclusive', 'SINGLEQ1': 'exclusive', 'TRIPLEQ1': 'exclusive', 'INITIAL': 'inclusive', 'TRIPLEQ2': 'exclusive'}
_lexstatere   = {'SINGLEQ2': [('(?P<t_SINGLEQ1_SINGLEQ2_TRIPLEQ1_TRIPLEQ2_escaped>\\\\(.|\\n))|(?P<t_SINGLEQ2_simple>[^"\\\\\\n]+)|(?P<t_SINGLEQ2_end>")', [None, ('t_SINGLEQ1_SINGLEQ2_TRIPLEQ1_TRIPLEQ2_escaped', 'escaped'), None, ('t_SINGLEQ2_simple', 'simple'), ('t_SINGLEQ2_end', 'end')])], 'SINGLEQ1': [("(?P<t_SINGLEQ1_SINGLEQ2_TRIPLEQ1_TRIPLEQ2_escaped>\\\\(.|\\n))|(?P<t_SINGLEQ1_simple>[^'\\\\\\n]+)|(?P<t_SINGLEQ1_end>')", [None, ('t_SINGLEQ1_SINGLEQ2_TRIPLEQ1_TRIPLEQ2_escaped', 'escaped'), None, ('t_SINGLEQ1_simple', 'simple'), ('t_SINGLEQ1_end', 'end')])], 'INITIAL': [('(?P<t_comment>[ ]*\\#[^\\r\\n]*)|(?P<t_WS> [ \\t\\f]+ )|(?P<t_escaped_newline>\\\\\\n)|(?P<t_newline>\\n+)|(?P<t_LPAR>\\()|(?P<t_RPAR>\\))|(?P<t_LBRACE>\\{)|(?P<t_RBRACE>\\})|(?P<t_LSQB>\\[)|(?P<t_RSQB>\\])|(?P<t_start_triple_quoted_q1_string>[uU]?[rR]?\'\'\')|(?P<t_start_triple_quoted_q2_string>[uU]?[rR]?""")|(?P<t_start_single_quoted_q1_string>[uU]?[rR]?\')|(?P<t_start_single_quoted_q2_string>[uU]?[rR]?")|(?P<t_NAME>[a-zA-Z_][a-zA-Z0-9_]*)|(?P<t_NUMBER>(([0-9]+[jJ]|(([0-9]+\\.[0-9]*|\\.[0-9]+)([eE][-+]?[0-9]+)?|[0-9]+[eE][-+]?[0-9]+)[jJ])|(([0-9]+\\.[0-9]*|\\.[0-9]+)([eE][-+]?[0-9]+)?|[0-9]+[eE][-+]?[0-9]+)|(0[xX][0-9a-fA-F]+|0[bB][01]+|0[oO][0-7]+|(?:0+|[1-9][0-9]*))))|(?P<t_PRAGMA>\\$pragma)|(?P<t_ELLIPSIS>\\.\\.\\.)|(?P<t_DOUBLESTAREQUAL>\\*\\*=)|(?P<t_DOUBLESTAR>\\*\\*)|(?P<t_VBAREQUAL>\\|=)|(?P<t_PLUSEQUAL>\\+=)|(?P<t_STAREQUAL>\\*=)|(?P<t_CIRCUMFLEXEQUAL>\\^=)|(?P<t_DOUBLESLASHEQUAL>//=)|(?P<t_LEFTSHIFTEQUAL><<=)|(?P<t_RIGHTSHIFTEQUAL>>>=)|(?P<t_CIRCUMFLEX>\\^)|(?P<t_PERCENTEQUAL>%=)|(?P<t_RIGHTSHIFT>>>)|(?P<t_NOTEQUAL>!=)|(?P<t_PLUS>\\+)|(?P<t_STAR>\\*)|(?P<t_LEFTSHIFT><<)|(?P<t_AMPEREQUAL>&=)|(?P<t_VBAR>\\|)|(?P<t_DOUBLESLASH>//)|(?P<t_LESSEQUAL><=)|(?P<t_DOT>\\.)|(?P<t_DOUBLECOLON>::)|(?P<t_MINUSEQUAL>-=)|(?P<t_COLONEQUAL>:=)|(?P<t_EQEQUAL>==)|(?P<t_SLASHEQUAL>/=)|(?P<t_GREATEREQUAL>>=)|(?P<t_RIGHTARROW>=>)|(?P<t_PERCENT>%)|(?P<t_TILDE>~)|(?P<t_COMMA>,)|(?P<t_GREATER>>)|(?P<t_MINUS>-)|(?P<t_AT>@)|(?P<t_SLASH>/)|(?P<t_COLON>:)|(?P<t_EQUAL>=)|(?P<t_AMPER>&)|(?P<t_LESS><)|(?P<t_SEMI>;)', [None, ('t_comment', 'comment'), ('t_WS', 'WS'), ('t_escaped_newline', 'escaped_newline'), ('t_newline', 'newline'), ('t_LPAR', 'LPAR'), ('t_RPAR', 'RPAR'), ('t_LBRACE', 'LBRACE'), ('t_RBRACE', 'RBRACE'), ('t_LSQB', 'LSQB'), ('t_RSQB', 'RSQB'), ('t_start_triple_quoted_q1_string', 'start_triple_quoted_q1_string'), ('t_start_triple_quoted_q2_string', 'start_triple_quoted_q2_string'), ('t_start_single_quoted_q1_string', 'start_single_quoted_q1_string'), ('t_start_single_quoted_q2_string', 'start_single_quoted_q2_string'), ('t_NAME', 'NAME'), (None, 'NUMBER'), None, None, None, None, None, None, None, None, None, (None, 'PRAGMA'), (None, 'ELLIPSIS'), (None, 'DOUBLESTAREQUAL'), (None, 'DOUBLESTAR'), (None, 'VBAREQUAL'), (None, 'PLUSEQUAL'), (None, 'STAREQUAL'), (None, 'CIRCUMFLEXEQUAL'), (None, 'DOUBLESLASHEQUAL'), (None, 'LEFTSHIFTEQUAL'), (None, 'RIGHTSHIFTEQUAL'), (None, 'CIRCUMFLEX'), (None, 'PERCENTEQUAL'), (None, 'RIGHTSHIFT'), (None, 'NOTEQUAL'), (None, 'PLUS'), (None, 'STAR'), (None, 'LEFTSHIFT'), (None, 'AMPEREQUAL'), (None, 'VBAR'), (None, 'DOUBLESLASH'), (None, 'LESSEQUAL'), (None, 'DOT'), (None, 'DOUBLECOLON'), (None, 'MINUSEQUAL'), (None, 'COLONEQUAL'), (None, 'EQEQUAL'), (None, 'SLASHEQUAL'), (None, 'GREATEREQUAL'), (None, 'RIGHTARROW'), (None, 'PERCENT'), (None, 'TILDE'), (None, 'COMMA'), (None, 'GREATER'), (None, 'MINUS'), (None, 'AT'), (None, 'SLASH'), (None, 'COLON'), (None, 'EQUAL'), (None, 'AMPER'), (None, 'LESS'), (None, 'SEMI')])], 'TRIPLEQ1': [("(?P<t_SINGLEQ1_SINGLEQ2_TRIPLEQ1_TRIPLEQ2_escaped>\\\\(.|\\n))|(?P<t_TRIPLEQ1_simple>[^'\\\\]+)|(?P<t_TRIPLEQ1_q1_but_not_triple>'(?!''))|(?P<t_TRIPLEQ1_end>''')", [None, ('t_SINGLEQ1_SINGLEQ2_TRIPLEQ1_TRIPLEQ2_escaped', 'escaped'), None, ('t_TRIPLEQ1_simple', 'simple'), ('t_TRIPLEQ1_q1_but_not_triple', 'q1_but_not_triple'), ('t_TRIPLEQ1_end', 'end')])], 'TRIPLEQ2': [('(?P<t_SINGLEQ1_SINGLEQ2_TRIPLEQ1_TRIPLEQ2_escaped>\\\\(.|\\n))|(?P<t_TRIPLEQ2_simple>[^"\\\\]+)|(?P<t_TRIPLEQ2_q2_but_not_triple>"(?!""))|(?P<t_TRIPLEQ2_end>""")', [None, ('t_SINGLEQ1_SINGLEQ2_TRIPLEQ1_TRIPLEQ2_escaped', 'escaped'), None, ('t_TRIPLEQ2_simple', 'simple'), ('t_TRIPLEQ2_q2_but_not_triple', 'q2_but_not_triple'), ('t_TRIPLEQ2_end', 'end')])]}
_lexstateignore = {'SINGLEQ2': '', 'SINGLEQ1': '', 'INITIAL': '', 'TRIPLEQ1': '', 'TRIPLEQ2': ''}
_lexstateerrorf = {'SINGLEQ2': 't_SINGLEQ2_error', 'SINGLEQ1': 't_SINGLEQ1_error', 'TRIPLEQ1': 't_TRIPLEQ1_error', 'INITIAL': 't_error', 'TRIPLEQ2': 't_TRIPLEQ2_error'}
_lexstateeoff = {}
